knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
install.packages("party")
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
churn <- read.csv('Telco-Customer-Churn.csv')
str(churn)
sapply(churn, function(x) sum(is.na(x)))
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
min(churn$tenure); max(churn$tenure)
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
numeric.var <- sapply(churn, is.numeric)
corr.matrix <- cor(churn[,numeric.var])
corrplot(corr.matrix, main="\n\nGráfico de Correlação para Variáveis Numéricas", method="number")
churn$TotalCharges <- NULL
p1 <- ggplot(churn, aes(x=gender)) + ggtitle("Gender") + xlab("Gender") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p2 <- ggplot(churn, aes(x=SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p3 <- ggplot(churn, aes(x=Partner)) + ggtitle("Partner") + xlab("Partner") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p4 <- ggplot(churn, aes(x=Dependents)) + ggtitle("Dependents") + xlab("Dependents") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p1, p2, p3, p4, ncol=2)
p5 <- ggplot(churn, aes(x=PhoneService)) + ggtitle("Phone Service") + xlab("Phone Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p6 <- ggplot(churn, aes(x=MultipleLines)) + ggtitle("Multiple Lines") + xlab("Multiple Lines") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p7 <- ggplot(churn, aes(x=InternetService)) + ggtitle("Internet Service") + xlab("Internet Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p8 <- ggplot(churn, aes(x=OnlineSecurity)) + ggtitle("Online Security") + xlab("Online Security") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p5, p6, p7, p8, ncol=2)
p9 <- ggplot(churn, aes(x=OnlineBackup)) + ggtitle("Online Backup") + xlab("Online Backup") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p10 <- ggplot(churn, aes(x=DeviceProtection)) + ggtitle("Device Protection") + xlab("Device Protection") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p11 <- ggplot(churn, aes(x=TechSupport)) + ggtitle("Tech Support") + xlab("Tech Support") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p12 <- ggplot(churn, aes(x=StreamingTV)) + ggtitle("Streaming TV") + xlab("Streaming TV") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p9, p10, p11, p12, ncol=2)
p13 <- ggplot(churn, aes(x=StreamingMovies)) + ggtitle("Streaming Movies") + xlab("Streaming Movies") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p14 <- ggplot(churn, aes(x=Contract)) + ggtitle("Contract") + xlab("Contract") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p15 <- ggplot(churn, aes(x=PaperlessBilling)) + ggtitle("Paperless Billing") + xlab("Paperless Billing") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p16 <- ggplot(churn, aes(x=PaymentMethod)) + ggtitle("Payment Method") + xlab("Payment Method") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p17 <- ggplot(churn, aes(x=tenure_group)) + ggtitle("Tenure Group") + xlab("Tenure Group") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p13, p14, p15, p16, p17, ncol=2)
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
View(training)
dim(training); dim(testing)
LogModel <- glm(Churn ~ .,family=binomial(link="logit"),data=training)
print(summary(LogModel))
anova(LogModel, test="Chisq")
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
print("Confusion Matrix Para Logistic Regression"); table(testing$Churn, fitted.results > 0.5)
exp(cbind(OR=coef(LogModel), confint(LogModel)))
churn <- read.csv('Telco-Customer-Churn.csv')
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
churn$TotalCharges <- NULL
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
tree <- ctree(Churn~Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')
pred_tree <- predict(tree, testing)
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
set.seed(2017)
rfModel <- randomForest(Churn ~., data = training)
print(rfModel)
pred_rf <- predict(rfModel, testing)
caret::confusionMatrix(pred_rf, testing$Churn)
plot(rfModel)
t <- tuneRF(training[, -18], training[, 18], stepFactor = 0.5, plot = TRUE, ntreeTry = 200, trace = TRUE, improve = 0.05)
rfModel_new <- randomForest(Churn ~., data = training, ntree = 200, mtry = 2, importance = TRUE, proximity = TRUE)
print(rfModel_new)
pred_rf_new <- predict(rfModel_new, testing)
caret::confusionMatrix(pred_rf_new, testing$Churn)
varImpPlot(rfModel_new, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
setwd("C:/Users/jo053424/Desktop/casas")
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("test.csv",header=T)
dim(df_train)
dim(df_test)
str(df_train)
View(df_test)
View(df_train)
df_train<-na.roughfix(df_train)
df_test<-na.roughfix(df_test)
sum(is.na(df_train))
sum(is.na(df_test))
trainInd<-createDataPartition(df_train$SalePrice,
p=0.8,
list=FALSE)
train_housing<-df_train[trainInd,]
valid_housing<-df_train[-trainInd,]
rf_model_housing <-train(SalePrice ~., # Standard formula notation
data=train_housing[,-1],  # Excclude 'id'
method="rf",              # randomForest
nodesize= 10,              # 10 data-points/node. Speeds modeling
ntree =500,               # Default 500. Reduced to speed up modeling
trControl=trainControl(method="repeatedcv", number=2,repeats=1),  # cross-validation strategy
tuneGrid = expand.grid(mtry = c(123))
)
rf_model_housing
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("test.csv",header=T)
dim(df_train)
dim(df_test)
str(df_train)
df_train<-na.roughfix(df_train)
na.roughfix(df_train)
View(df_train)
View(df_test)
trainInd<-createDataPartition(df_train$SalePrice,
p=0.8,
list=FALSE)
train_housing<-df_train[trainInd,]
valid_housing<-df_train[-trainInd,]
rf_model_housing <-train(SalePrice ~., # Standard formula notation
data=train_housing[,-1],  # Excclude 'id'
method="rf",              # randomForest
nodesize= 10,              # 10 data-points/node. Speeds modeling
ntree =500,               # Default 500. Reduced to speed up modeling
trControl=trainControl(method="repeatedcv", number=2,repeats=1),  # cross-validation strategy
tuneGrid = expand.grid(mtry = c(123))
)
rf_model_housing
pred_results <- predict(rf_model_housing,
valid_housing,
type = "raw")
pred_df <- data.frame(pred_results)
valid_verify_df <- cbind(valid_housing$SalePrice,pred_df)
head(valid_verify_df)
SalePrice <- predict(rf_model_housing,
df_test,
type = "raw")
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("../input/test.csv",header=T)
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("../input/test.csv",header=T)
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("test.csv",header=T)
dim(df_train)
dim(df_test)
str(df_train)
df_train<-na.roughfix(df_train)
df_test<-na.roughfix(df_test)
sum(is.na(df_train))
sum(is.na(df_test))
trainInd<-createDataPartition(df_train$SalePrice,
p=0.8,
list=FALSE)
train_housing<-df_train[trainInd,]
valid_housing<-df_train[-trainInd,]
rf_model_housing <-train(SalePrice ~., # Standard formula notation
data=train_housing[,-1],  # Excclude 'id'
method="rf",              # randomForest
nodesize= 10,              # 10 data-points/node. Speeds modeling
ntree =500,               # Default 500. Reduced to speed up modeling
trControl=trainControl(method="repeatedcv", number=2,repeats=1),  # cross-validation strategy
tuneGrid = expand.grid(mtry = c(123))
)
rf_model_housing
pred_results <- predict(rf_model_housing,
valid_housing,
type = "raw")
pred_df <- data.frame(pred_results)
valid_verify_df <- cbind(valid_housing$SalePrice,pred_df)
head(valid_verify_df)
SalePrice <- predict(rf_model_housing,
df_test,
type = "raw")
SalePrice <- data.frame(SalePrice)
test_verify_df <- cbind("Id" = df_test$Id, SalePrice)
head(test_verify_df)
write.csv(test_verify_df,file="Sahil_Yagnik_submission.csv", quote = FALSE, row.names = FALSE)
glimpse(df_train)
library(tibble)
glimpse(df_train)
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("test.csv",header=T)
dim(df_train)
dim(df_test)
str(df_train)
rf_model_housing <-train(SalePrice ~., # Standard formula notation
data=train_housing[,-1],  # Excclude 'id'
method="rf",              # randomForest
nodesize= 10,              # 10 data-points/node. Speeds modeling
ntree =500,               # Default 500. Reduced to speed up modeling
trControl=trainControl(method="repeatedcv", number=2,repeats=1),  # cross-validation strategy
tuneGrid = expand.grid(mtry = c(123))
)
df_train<-na.roughfix(df_train)
setwd("C:/Users/jo053424/Desktop/casas")
library(readr) # CSV file I/O, e.g. the read_csv function
library(randomForest)    # For Random Forest
library(caret)        # createDataPartition()
df_train <- read.csv("train.csv",header=T)
df_test <- read.csv("test.csv",header=T)
dim(df_train)
dim(df_test)
str(df_train)
df_train<-na.roughfix(df_train)
df_test<-na.roughfix(df_test)
sum(is.na(df_train))
sum(is.na(df_test))
trainInd<-createDataPartition(df_train$SalePrice,
p=0.8,
list=FALSE)
train_housing<-df_train[trainInd,]
valid_housing<-df_train[-trainInd,]
rf_model_housing <-train(SalePrice ~., # Standard formula notation
data=train_housing[,-1],  # Excclude 'id'
method="rf",              # randomForest
nodesize= 10,              # 10 data-points/node. Speeds modeling
ntree =500,               # Default 500. Reduced to speed up modeling
trControl=trainControl(method="repeatedcv", number=2,repeats=1),  # cross-validation strategy
tuneGrid = expand.grid(mtry = c(123))
)
rf_model_housing
pred_results <- predict(rf_model_housing,
valid_housing,
type = "raw")
pred_df <- data.frame(pred_results)
valid_verify_df <- cbind(valid_housing$SalePrice,pred_df)
head(valid_verify_df)
